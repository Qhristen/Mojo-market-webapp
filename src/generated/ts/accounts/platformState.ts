/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PLATFORM_STATE_DISCRIMINATOR = new Uint8Array([
  160, 10, 182, 134, 98, 122, 78, 239,
]);

export function getPlatformStateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PLATFORM_STATE_DISCRIMINATOR
  );
}

export type PlatformState = {
  discriminator: ReadonlyUint8Array;
  baseTokenMint: Address;
  admin: Address;
  feeCollector: Address;
  isPaused: boolean;
  protocolFeeRate: number;
  bump: number;
};

export type PlatformStateArgs = {
  baseTokenMint: Address;
  admin: Address;
  feeCollector: Address;
  isPaused: boolean;
  protocolFeeRate: number;
  bump: number;
};

export function getPlatformStateEncoder(): Encoder<PlatformStateArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseTokenMint', getAddressEncoder()],
      ['admin', getAddressEncoder()],
      ['feeCollector', getAddressEncoder()],
      ['isPaused', getBooleanEncoder()],
      ['protocolFeeRate', getU16Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: PLATFORM_STATE_DISCRIMINATOR })
  );
}

export function getPlatformStateDecoder(): Decoder<PlatformState> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseTokenMint', getAddressDecoder()],
    ['admin', getAddressDecoder()],
    ['feeCollector', getAddressDecoder()],
    ['isPaused', getBooleanDecoder()],
    ['protocolFeeRate', getU16Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getPlatformStateCodec(): Codec<
  PlatformStateArgs,
  PlatformState
> {
  return combineCodec(getPlatformStateEncoder(), getPlatformStateDecoder());
}

export function decodePlatformState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PlatformState, TAddress>;
export function decodePlatformState<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PlatformState, TAddress>;
export function decodePlatformState<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<PlatformState, TAddress> | MaybeAccount<PlatformState, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPlatformStateDecoder()
  );
}

export async function fetchPlatformState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PlatformState, TAddress>> {
  const maybeAccount = await fetchMaybePlatformState(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePlatformState<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PlatformState, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePlatformState(maybeAccount);
}

export async function fetchAllPlatformState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PlatformState>[]> {
  const maybeAccounts = await fetchAllMaybePlatformState(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePlatformState(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PlatformState>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePlatformState(maybeAccount));
}

export function getPlatformStateSize(): number {
  return 108;
}
