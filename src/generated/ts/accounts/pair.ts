/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PAIR_DISCRIMINATOR = new Uint8Array([
  85, 72, 49, 176, 182, 228, 141, 82,
]);

export function getPairDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PAIR_DISCRIMINATOR);
}

export type Pair = {
  discriminator: ReadonlyUint8Array;
  baseTokenMint: Address;
  pairedTokenMint: Address;
  lpMint: Address;
  baseReserve: bigint;
  pairedReserve: bigint;
  totalLiquidity: bigint;
  bump: number;
  lastSwapTime: bigint;
  baseVault: Address;
  pairedVault: Address;
};

export type PairArgs = {
  baseTokenMint: Address;
  pairedTokenMint: Address;
  lpMint: Address;
  baseReserve: number | bigint;
  pairedReserve: number | bigint;
  totalLiquidity: number | bigint;
  bump: number;
  lastSwapTime: number | bigint;
  baseVault: Address;
  pairedVault: Address;
};

export function getPairEncoder(): Encoder<PairArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseTokenMint', getAddressEncoder()],
      ['pairedTokenMint', getAddressEncoder()],
      ['lpMint', getAddressEncoder()],
      ['baseReserve', getU64Encoder()],
      ['pairedReserve', getU64Encoder()],
      ['totalLiquidity', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['lastSwapTime', getI64Encoder()],
      ['baseVault', getAddressEncoder()],
      ['pairedVault', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PAIR_DISCRIMINATOR })
  );
}

export function getPairDecoder(): Decoder<Pair> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseTokenMint', getAddressDecoder()],
    ['pairedTokenMint', getAddressDecoder()],
    ['lpMint', getAddressDecoder()],
    ['baseReserve', getU64Decoder()],
    ['pairedReserve', getU64Decoder()],
    ['totalLiquidity', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['lastSwapTime', getI64Decoder()],
    ['baseVault', getAddressDecoder()],
    ['pairedVault', getAddressDecoder()],
  ]);
}

export function getPairCodec(): Codec<PairArgs, Pair> {
  return combineCodec(getPairEncoder(), getPairDecoder());
}

export function decodePair<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Pair, TAddress>;
export function decodePair<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Pair, TAddress>;
export function decodePair<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Pair, TAddress> | MaybeAccount<Pair, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPairDecoder()
  );
}

export async function fetchPair<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Pair, TAddress>> {
  const maybeAccount = await fetchMaybePair(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePair<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Pair, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePair(maybeAccount);
}

export async function fetchAllPair(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Pair>[]> {
  const maybeAccounts = await fetchAllMaybePair(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePair(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Pair>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePair(maybeAccount));
}

export function getPairSize(): number {
  return 201;
}
