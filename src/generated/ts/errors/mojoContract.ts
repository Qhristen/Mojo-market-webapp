/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';

/** SlippageExceeded: Slippage tolerance exceeded */
export const MOJO_CONTRACT_ERROR__SLIPPAGE_EXCEEDED = 0x1770; // 6000
/** TradingPaused: Trading is paused */
export const MOJO_CONTRACT_ERROR__TRADING_PAUSED = 0x1771; // 6001
/** ZeroAmount: Invalid zero amount */
export const MOJO_CONTRACT_ERROR__ZERO_AMOUNT = 0x1772; // 6002
/** MathError: Arithmetic error */
export const MOJO_CONTRACT_ERROR__MATH_ERROR = 0x1773; // 6003
/** SwapCooldown: Swap cooldown not expired */
export const MOJO_CONTRACT_ERROR__SWAP_COOLDOWN = 0x1774; // 6004
/** InvalidPair: Invalid token pair */
export const MOJO_CONTRACT_ERROR__INVALID_PAIR = 0x1775; // 6005
/** InvalidFeeConfig: Invalid fee configuration */
export const MOJO_CONTRACT_ERROR__INVALID_FEE_CONFIG = 0x1776; // 6006
/** FeeTooHigh: Fee rate cannot exceed 10% */
export const MOJO_CONTRACT_ERROR__FEE_TOO_HIGH = 0x1777; // 6007
/** ProtocolFeeTooHigh: Protocol fee rate cannot exceed 2% */
export const MOJO_CONTRACT_ERROR__PROTOCOL_FEE_TOO_HIGH = 0x1778; // 6008
/** InvalidBaseToken: Base token must be the platform's base token (MOJO) */
export const MOJO_CONTRACT_ERROR__INVALID_BASE_TOKEN = 0x1779; // 6009
/** InvalidPairedToken: Invalid paired token */
export const MOJO_CONTRACT_ERROR__INVALID_PAIRED_TOKEN = 0x177a; // 6010
/** Unauthorized: Unauthorized access */
export const MOJO_CONTRACT_ERROR__UNAUTHORIZED = 0x177b; // 6011
/** TokenMintMismatch: Token mint mismatch */
export const MOJO_CONTRACT_ERROR__TOKEN_MINT_MISMATCH = 0x177c; // 6012
/** InvalidAmount: Invalid amount */
export const MOJO_CONTRACT_ERROR__INVALID_AMOUNT = 0x177d; // 6013
/** AlreadyPaused: Platform is already paused */
export const MOJO_CONTRACT_ERROR__ALREADY_PAUSED = 0x177e; // 6014
/** NotPaused: Platform is not paused */
export const MOJO_CONTRACT_ERROR__NOT_PAUSED = 0x177f; // 6015
/** InvalidPauseState: Invalid pause transition */
export const MOJO_CONTRACT_ERROR__INVALID_PAUSE_STATE = 0x1780; // 6016
/** InsufficientLiquidityMinted: Insufficient liquidity minted */
export const MOJO_CONTRACT_ERROR__INSUFFICIENT_LIQUIDITY_MINTED = 0x1781; // 6017
/** MathOverflow: Math overflow occurred */
export const MOJO_CONTRACT_ERROR__MATH_OVERFLOW = 0x1782; // 6018

export type MojoContractError =
  | typeof MOJO_CONTRACT_ERROR__ALREADY_PAUSED
  | typeof MOJO_CONTRACT_ERROR__FEE_TOO_HIGH
  | typeof MOJO_CONTRACT_ERROR__INSUFFICIENT_LIQUIDITY_MINTED
  | typeof MOJO_CONTRACT_ERROR__INVALID_AMOUNT
  | typeof MOJO_CONTRACT_ERROR__INVALID_BASE_TOKEN
  | typeof MOJO_CONTRACT_ERROR__INVALID_FEE_CONFIG
  | typeof MOJO_CONTRACT_ERROR__INVALID_PAIR
  | typeof MOJO_CONTRACT_ERROR__INVALID_PAIRED_TOKEN
  | typeof MOJO_CONTRACT_ERROR__INVALID_PAUSE_STATE
  | typeof MOJO_CONTRACT_ERROR__MATH_ERROR
  | typeof MOJO_CONTRACT_ERROR__MATH_OVERFLOW
  | typeof MOJO_CONTRACT_ERROR__NOT_PAUSED
  | typeof MOJO_CONTRACT_ERROR__PROTOCOL_FEE_TOO_HIGH
  | typeof MOJO_CONTRACT_ERROR__SLIPPAGE_EXCEEDED
  | typeof MOJO_CONTRACT_ERROR__SWAP_COOLDOWN
  | typeof MOJO_CONTRACT_ERROR__TOKEN_MINT_MISMATCH
  | typeof MOJO_CONTRACT_ERROR__TRADING_PAUSED
  | typeof MOJO_CONTRACT_ERROR__UNAUTHORIZED
  | typeof MOJO_CONTRACT_ERROR__ZERO_AMOUNT;

let mojoContractErrorMessages: Record<MojoContractError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  mojoContractErrorMessages = {
    [MOJO_CONTRACT_ERROR__ALREADY_PAUSED]: `Platform is already paused`,
    [MOJO_CONTRACT_ERROR__FEE_TOO_HIGH]: `Fee rate cannot exceed 10%`,
    [MOJO_CONTRACT_ERROR__INSUFFICIENT_LIQUIDITY_MINTED]: `Insufficient liquidity minted`,
    [MOJO_CONTRACT_ERROR__INVALID_AMOUNT]: `Invalid amount`,
    [MOJO_CONTRACT_ERROR__INVALID_BASE_TOKEN]: `Base token must be the platform's base token (MOJO)`,
    [MOJO_CONTRACT_ERROR__INVALID_FEE_CONFIG]: `Invalid fee configuration`,
    [MOJO_CONTRACT_ERROR__INVALID_PAIR]: `Invalid token pair`,
    [MOJO_CONTRACT_ERROR__INVALID_PAIRED_TOKEN]: `Invalid paired token`,
    [MOJO_CONTRACT_ERROR__INVALID_PAUSE_STATE]: `Invalid pause transition`,
    [MOJO_CONTRACT_ERROR__MATH_ERROR]: `Arithmetic error`,
    [MOJO_CONTRACT_ERROR__MATH_OVERFLOW]: `Math overflow occurred`,
    [MOJO_CONTRACT_ERROR__NOT_PAUSED]: `Platform is not paused`,
    [MOJO_CONTRACT_ERROR__PROTOCOL_FEE_TOO_HIGH]: `Protocol fee rate cannot exceed 2%`,
    [MOJO_CONTRACT_ERROR__SLIPPAGE_EXCEEDED]: `Slippage tolerance exceeded`,
    [MOJO_CONTRACT_ERROR__SWAP_COOLDOWN]: `Swap cooldown not expired`,
    [MOJO_CONTRACT_ERROR__TOKEN_MINT_MISMATCH]: `Token mint mismatch`,
    [MOJO_CONTRACT_ERROR__TRADING_PAUSED]: `Trading is paused`,
    [MOJO_CONTRACT_ERROR__UNAUTHORIZED]: `Unauthorized access`,
    [MOJO_CONTRACT_ERROR__ZERO_AMOUNT]: `Invalid zero amount`,
  };
}

export function getMojoContractErrorMessage(code: MojoContractError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (mojoContractErrorMessages as Record<MojoContractError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isMojoContractError<
  TProgramErrorCode extends MojoContractError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    MOJO_CONTRACT_PROGRAM_ADDRESS,
    code
  );
}
