/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const WITHDRAW_PLATFORM_FEES_DISCRIMINATOR = new Uint8Array([
  87, 24, 138, 122, 62, 146, 186, 199,
]);

export function getWithdrawPlatformFeesDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_PLATFORM_FEES_DISCRIMINATOR
  );
}

export type WithdrawPlatformFeesInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPlatformState extends string | IAccountMeta<string> = string,
  TAccountProtocolFeeVault extends string | IAccountMeta<string> = string,
  TAccountTokenMint extends string | IAccountMeta<string> = string,
  TAccountFeeDestination extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPlatformState extends string
        ? ReadonlyAccount<TAccountPlatformState>
        : TAccountPlatformState,
      TAccountProtocolFeeVault extends string
        ? WritableAccount<TAccountProtocolFeeVault>
        : TAccountProtocolFeeVault,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountFeeDestination extends string
        ? WritableAccount<TAccountFeeDestination>
        : TAccountFeeDestination,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawPlatformFeesInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawPlatformFeesInstructionDataArgs = {
  amount: number | bigint;
};

export function getWithdrawPlatformFeesInstructionDataEncoder(): Encoder<WithdrawPlatformFeesInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: WITHDRAW_PLATFORM_FEES_DISCRIMINATOR,
    })
  );
}

export function getWithdrawPlatformFeesInstructionDataDecoder(): Decoder<WithdrawPlatformFeesInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawPlatformFeesInstructionDataCodec(): Codec<
  WithdrawPlatformFeesInstructionDataArgs,
  WithdrawPlatformFeesInstructionData
> {
  return combineCodec(
    getWithdrawPlatformFeesInstructionDataEncoder(),
    getWithdrawPlatformFeesInstructionDataDecoder()
  );
}

export type WithdrawPlatformFeesAsyncInput<
  TAccountAdmin extends string = string,
  TAccountPlatformState extends string = string,
  TAccountProtocolFeeVault extends string = string,
  TAccountTokenMint extends string = string,
  TAccountFeeDestination extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  platformState: Address<TAccountPlatformState>;
  protocolFeeVault?: Address<TAccountProtocolFeeVault>;
  tokenMint: Address<TAccountTokenMint>;
  feeDestination: Address<TAccountFeeDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawPlatformFeesInstructionDataArgs['amount'];
};

export async function getWithdrawPlatformFeesInstructionAsync<
  TAccountAdmin extends string,
  TAccountPlatformState extends string,
  TAccountProtocolFeeVault extends string,
  TAccountTokenMint extends string,
  TAccountFeeDestination extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: WithdrawPlatformFeesAsyncInput<
    TAccountAdmin,
    TAccountPlatformState,
    TAccountProtocolFeeVault,
    TAccountTokenMint,
    TAccountFeeDestination,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawPlatformFeesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPlatformState,
    TAccountProtocolFeeVault,
    TAccountTokenMint,
    TAccountFeeDestination,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    platformState: { value: input.platformState ?? null, isWritable: false },
    protocolFeeVault: {
      value: input.protocolFeeVault ?? null,
      isWritable: true,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    feeDestination: { value: input.feeDestination ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.protocolFeeVault.value) {
    accounts.protocolFeeVault.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 116, 111, 99, 111, 108, 95, 102, 101, 101,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.protocolFeeVault),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.feeDestination),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawPlatformFeesInstructionDataEncoder().encode(
      args as WithdrawPlatformFeesInstructionDataArgs
    ),
  } as WithdrawPlatformFeesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPlatformState,
    TAccountProtocolFeeVault,
    TAccountTokenMint,
    TAccountFeeDestination,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type WithdrawPlatformFeesInput<
  TAccountAdmin extends string = string,
  TAccountPlatformState extends string = string,
  TAccountProtocolFeeVault extends string = string,
  TAccountTokenMint extends string = string,
  TAccountFeeDestination extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  platformState: Address<TAccountPlatformState>;
  protocolFeeVault: Address<TAccountProtocolFeeVault>;
  tokenMint: Address<TAccountTokenMint>;
  feeDestination: Address<TAccountFeeDestination>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  amount: WithdrawPlatformFeesInstructionDataArgs['amount'];
};

export function getWithdrawPlatformFeesInstruction<
  TAccountAdmin extends string,
  TAccountPlatformState extends string,
  TAccountProtocolFeeVault extends string,
  TAccountTokenMint extends string,
  TAccountFeeDestination extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: WithdrawPlatformFeesInput<
    TAccountAdmin,
    TAccountPlatformState,
    TAccountProtocolFeeVault,
    TAccountTokenMint,
    TAccountFeeDestination,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawPlatformFeesInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPlatformState,
  TAccountProtocolFeeVault,
  TAccountTokenMint,
  TAccountFeeDestination,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    platformState: { value: input.platformState ?? null, isWritable: false },
    protocolFeeVault: {
      value: input.protocolFeeVault ?? null,
      isWritable: true,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    feeDestination: { value: input.feeDestination ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.protocolFeeVault),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.feeDestination),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawPlatformFeesInstructionDataEncoder().encode(
      args as WithdrawPlatformFeesInstructionDataArgs
    ),
  } as WithdrawPlatformFeesInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPlatformState,
    TAccountProtocolFeeVault,
    TAccountTokenMint,
    TAccountFeeDestination,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawPlatformFeesInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    platformState: TAccountMetas[1];
    protocolFeeVault: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    feeDestination: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: WithdrawPlatformFeesInstructionData;
};

export function parseWithdrawPlatformFeesInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawPlatformFeesInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      platformState: getNextAccount(),
      protocolFeeVault: getNextAccount(),
      tokenMint: getNextAccount(),
      feeDestination: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawPlatformFeesInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
