/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PAUSE_PLATFORM_DISCRIMINATOR = new Uint8Array([
  232, 46, 204, 130, 181, 0, 172, 57,
]);

export function getPausePlatformDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    PAUSE_PLATFORM_DISCRIMINATOR
  );
}

export type PausePlatformInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountPlatform extends string | IAccountMeta<string> = string,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPlatform extends string
        ? WritableAccount<TAccountPlatform>
        : TAccountPlatform,
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PausePlatformInstructionData = {
  discriminator: ReadonlyUint8Array;
  pause: boolean;
};

export type PausePlatformInstructionDataArgs = { pause: boolean };

export function getPausePlatformInstructionDataEncoder(): Encoder<PausePlatformInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['pause', getBooleanEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PAUSE_PLATFORM_DISCRIMINATOR })
  );
}

export function getPausePlatformInstructionDataDecoder(): Decoder<PausePlatformInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['pause', getBooleanDecoder()],
  ]);
}

export function getPausePlatformInstructionDataCodec(): Codec<
  PausePlatformInstructionDataArgs,
  PausePlatformInstructionData
> {
  return combineCodec(
    getPausePlatformInstructionDataEncoder(),
    getPausePlatformInstructionDataDecoder()
  );
}

export type PausePlatformAsyncInput<
  TAccountPlatform extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Platform configuration (PDA) */
  platform?: Address<TAccountPlatform>;
  /** Platform admin (must match platform.admin) */
  admin: TransactionSigner<TAccountAdmin>;
  /** System program for clock access */
  systemProgram?: Address<TAccountSystemProgram>;
  pause: PausePlatformInstructionDataArgs['pause'];
};

export async function getPausePlatformInstructionAsync<
  TAccountPlatform extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: PausePlatformAsyncInput<
    TAccountPlatform,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PausePlatformInstruction<
    TProgramAddress,
    TAccountPlatform,
    TAccountAdmin,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platform: { value: input.platform ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.platform.value) {
    accounts.platform.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 108, 97, 116, 102, 111, 114, 109, 45, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platform),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPausePlatformInstructionDataEncoder().encode(
      args as PausePlatformInstructionDataArgs
    ),
  } as PausePlatformInstruction<
    TProgramAddress,
    TAccountPlatform,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type PausePlatformInput<
  TAccountPlatform extends string = string,
  TAccountAdmin extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Platform configuration (PDA) */
  platform: Address<TAccountPlatform>;
  /** Platform admin (must match platform.admin) */
  admin: TransactionSigner<TAccountAdmin>;
  /** System program for clock access */
  systemProgram?: Address<TAccountSystemProgram>;
  pause: PausePlatformInstructionDataArgs['pause'];
};

export function getPausePlatformInstruction<
  TAccountPlatform extends string,
  TAccountAdmin extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: PausePlatformInput<
    TAccountPlatform,
    TAccountAdmin,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PausePlatformInstruction<
  TProgramAddress,
  TAccountPlatform,
  TAccountAdmin,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platform: { value: input.platform ?? null, isWritable: true },
    admin: { value: input.admin ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platform),
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getPausePlatformInstructionDataEncoder().encode(
      args as PausePlatformInstructionDataArgs
    ),
  } as PausePlatformInstruction<
    TProgramAddress,
    TAccountPlatform,
    TAccountAdmin,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedPausePlatformInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Platform configuration (PDA) */
    platform: TAccountMetas[0];
    /** Platform admin (must match platform.admin) */
    admin: TAccountMetas[1];
    /** System program for clock access */
    systemProgram: TAccountMetas[2];
  };
  data: PausePlatformInstructionData;
};

export function parsePausePlatformInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedPausePlatformInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      platform: getNextAccount(),
      admin: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getPausePlatformInstructionDataDecoder().decode(instruction.data),
  };
}
