/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  181, 157, 89, 67, 143, 182, 52, 72,
]);

export function getAddLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_LIQUIDITY_DISCRIMINATOR
  );
}

export type AddLiquidityInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountPair extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountUserBaseAta extends string | IAccountMeta<string> = string,
  TAccountPairedVault extends string | IAccountMeta<string> = string,
  TAccountUserPairedAta extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountUserLpAta extends string | IAccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountPair extends string
        ? WritableAccount<TAccountPair>
        : TAccountPair,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountUserBaseAta extends string
        ? WritableAccount<TAccountUserBaseAta>
        : TAccountUserBaseAta,
      TAccountPairedVault extends string
        ? WritableAccount<TAccountPairedVault>
        : TAccountPairedVault,
      TAccountUserPairedAta extends string
        ? WritableAccount<TAccountUserPairedAta>
        : TAccountUserPairedAta,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountUserLpAta extends string
        ? WritableAccount<TAccountUserLpAta>
        : TAccountUserLpAta,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  baseAmount: bigint;
  pairedAmount: bigint;
};

export type AddLiquidityInstructionDataArgs = {
  baseAmount: number | bigint;
  pairedAmount: number | bigint;
};

export function getAddLiquidityInstructionDataEncoder(): Encoder<AddLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['baseAmount', getU64Encoder()],
      ['pairedAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ADD_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getAddLiquidityInstructionDataDecoder(): Decoder<AddLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['baseAmount', getU64Decoder()],
    ['pairedAmount', getU64Decoder()],
  ]);
}

export function getAddLiquidityInstructionDataCodec(): Codec<
  AddLiquidityInstructionDataArgs,
  AddLiquidityInstructionData
> {
  return combineCodec(
    getAddLiquidityInstructionDataEncoder(),
    getAddLiquidityInstructionDataDecoder()
  );
}

export type AddLiquidityInput<
  TAccountUser extends string = string,
  TAccountPair extends string = string,
  TAccountBaseVault extends string = string,
  TAccountUserBaseAta extends string = string,
  TAccountPairedVault extends string = string,
  TAccountUserPairedAta extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserLpAta extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The user adding liquidity */
  user: TransactionSigner<TAccountUser>;
  /** The Pair state for the MOJO/paired token pool */
  pair: Address<TAccountPair>;
  /** Vault holding base token (MOJO) */
  baseVault: Address<TAccountBaseVault>;
  /** User's base token ATA */
  userBaseAta: Address<TAccountUserBaseAta>;
  /** Vault holding paired token */
  pairedVault: Address<TAccountPairedVault>;
  /** User's paired token ATA */
  userPairedAta: Address<TAccountUserPairedAta>;
  /** LP token mint for this pool */
  lpMint: Address<TAccountLpMint>;
  /** User's LP token ATA */
  userLpAta: Address<TAccountUserLpAta>;
  /** Token program */
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  baseAmount: AddLiquidityInstructionDataArgs['baseAmount'];
  pairedAmount: AddLiquidityInstructionDataArgs['pairedAmount'];
};

export function getAddLiquidityInstruction<
  TAccountUser extends string,
  TAccountPair extends string,
  TAccountBaseVault extends string,
  TAccountUserBaseAta extends string,
  TAccountPairedVault extends string,
  TAccountUserPairedAta extends string,
  TAccountLpMint extends string,
  TAccountUserLpAta extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: AddLiquidityInput<
    TAccountUser,
    TAccountPair,
    TAccountBaseVault,
    TAccountUserBaseAta,
    TAccountPairedVault,
    TAccountUserPairedAta,
    TAccountLpMint,
    TAccountUserLpAta,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddLiquidityInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountPair,
  TAccountBaseVault,
  TAccountUserBaseAta,
  TAccountPairedVault,
  TAccountUserPairedAta,
  TAccountLpMint,
  TAccountUserLpAta,
  TAccountAssociatedTokenProgram,
  TAccountSystemProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    pair: { value: input.pair ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    userBaseAta: { value: input.userBaseAta ?? null, isWritable: true },
    pairedVault: { value: input.pairedVault ?? null, isWritable: true },
    userPairedAta: { value: input.userPairedAta ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userLpAta: { value: input.userLpAta ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.pair),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.userBaseAta),
      getAccountMeta(accounts.pairedVault),
      getAccountMeta(accounts.userPairedAta),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userLpAta),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getAddLiquidityInstructionDataEncoder().encode(
      args as AddLiquidityInstructionDataArgs
    ),
  } as AddLiquidityInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountPair,
    TAccountBaseVault,
    TAccountUserBaseAta,
    TAccountPairedVault,
    TAccountUserPairedAta,
    TAccountLpMint,
    TAccountUserLpAta,
    TAccountAssociatedTokenProgram,
    TAccountSystemProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedAddLiquidityInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The user adding liquidity */
    user: TAccountMetas[0];
    /** The Pair state for the MOJO/paired token pool */
    pair: TAccountMetas[1];
    /** Vault holding base token (MOJO) */
    baseVault: TAccountMetas[2];
    /** User's base token ATA */
    userBaseAta: TAccountMetas[3];
    /** Vault holding paired token */
    pairedVault: TAccountMetas[4];
    /** User's paired token ATA */
    userPairedAta: TAccountMetas[5];
    /** LP token mint for this pool */
    lpMint: TAccountMetas[6];
    /** User's LP token ATA */
    userLpAta: TAccountMetas[7];
    /** Token program */
    associatedTokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
  };
  data: AddLiquidityInstructionData;
};

export function parseAddLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAddLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      pair: getNextAccount(),
      baseVault: getNextAccount(),
      userBaseAta: getNextAccount(),
      pairedVault: getNextAccount(),
      userPairedAta: getNextAccount(),
      lpMint: getNextAccount(),
      userLpAta: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getAddLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
