/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RESUME_PLAFORM_DISCRIMINATOR = new Uint8Array([
  65, 159, 193, 22, 213, 95, 129, 28,
]);

export function getResumePlaformDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESUME_PLAFORM_DISCRIMINATOR
  );
}

export type ResumePlaformInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountPlatformState extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? ReadonlySignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountPlatformState extends string
        ? WritableAccount<TAccountPlatformState>
        : TAccountPlatformState,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResumePlaformInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ResumePlaformInstructionDataArgs = {};

export function getResumePlaformInstructionDataEncoder(): Encoder<ResumePlaformInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RESUME_PLAFORM_DISCRIMINATOR })
  );
}

export function getResumePlaformInstructionDataDecoder(): Decoder<ResumePlaformInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getResumePlaformInstructionDataCodec(): Codec<
  ResumePlaformInstructionDataArgs,
  ResumePlaformInstructionData
> {
  return combineCodec(
    getResumePlaformInstructionDataEncoder(),
    getResumePlaformInstructionDataDecoder()
  );
}

export type ResumePlaformInput<
  TAccountAdmin extends string = string,
  TAccountPlatformState extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  platformState: Address<TAccountPlatformState>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getResumePlaformInstruction<
  TAccountAdmin extends string,
  TAccountPlatformState extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: ResumePlaformInput<
    TAccountAdmin,
    TAccountPlatformState,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ResumePlaformInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountPlatformState,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: false },
    platformState: { value: input.platformState ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResumePlaformInstructionDataEncoder().encode({}),
  } as ResumePlaformInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountPlatformState,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedResumePlaformInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    platformState: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: ResumePlaformInstructionData;
};

export function parseResumePlaformInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedResumePlaformInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      platformState: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getResumePlaformInstructionDataDecoder().decode(instruction.data),
  };
}
