/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const SWAP_DISCRIMINATOR = new Uint8Array([
  248, 198, 158, 145, 225, 117, 135, 200,
]);

export function getSwapDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SWAP_DISCRIMINATOR);
}

export type SwapInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountPlatformState extends string | IAccountMeta<string> = string,
  TAccountPair extends string | IAccountMeta<string> = string,
  TAccountBaseTokenMint extends string | IAccountMeta<string> = string,
  TAccountPairedTokenMint extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountPairedVault extends string | IAccountMeta<string> = string,
  TAccountPlatformTreasury extends string | IAccountMeta<string> = string,
  TAccountBaseTokenAccount extends string | IAccountMeta<string> = string,
  TAccountPairTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPlatformState extends string
        ? ReadonlyAccount<TAccountPlatformState>
        : TAccountPlatformState,
      TAccountPair extends string
        ? WritableAccount<TAccountPair>
        : TAccountPair,
      TAccountBaseTokenMint extends string
        ? ReadonlyAccount<TAccountBaseTokenMint>
        : TAccountBaseTokenMint,
      TAccountPairedTokenMint extends string
        ? ReadonlyAccount<TAccountPairedTokenMint>
        : TAccountPairedTokenMint,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountPairedVault extends string
        ? WritableAccount<TAccountPairedVault>
        : TAccountPairedVault,
      TAccountPlatformTreasury extends string
        ? WritableAccount<TAccountPlatformTreasury>
        : TAccountPlatformTreasury,
      TAccountBaseTokenAccount extends string
        ? WritableAccount<TAccountBaseTokenAccount>
        : TAccountBaseTokenAccount,
      TAccountPairTokenAccount extends string
        ? WritableAccount<TAccountPairTokenAccount>
        : TAccountPairTokenAccount,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SwapInstructionData = {
  discriminator: ReadonlyUint8Array;
  inputAmount: bigint;
  minOutputAmount: bigint;
};

export type SwapInstructionDataArgs = {
  inputAmount: number | bigint;
  minOutputAmount: number | bigint;
};

export function getSwapInstructionDataEncoder(): Encoder<SwapInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['inputAmount', getU64Encoder()],
      ['minOutputAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: SWAP_DISCRIMINATOR })
  );
}

export function getSwapInstructionDataDecoder(): Decoder<SwapInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['inputAmount', getU64Decoder()],
    ['minOutputAmount', getU64Decoder()],
  ]);
}

export function getSwapInstructionDataCodec(): Codec<
  SwapInstructionDataArgs,
  SwapInstructionData
> {
  return combineCodec(
    getSwapInstructionDataEncoder(),
    getSwapInstructionDataDecoder()
  );
}

export type SwapAsyncInput<
  TAccountPlatformState extends string = string,
  TAccountPair extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountPairedTokenMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountPairedVault extends string = string,
  TAccountPlatformTreasury extends string = string,
  TAccountBaseTokenAccount extends string = string,
  TAccountPairTokenAccount extends string = string,
  TAccountUser extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  platformState: Address<TAccountPlatformState>;
  pair?: Address<TAccountPair>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  pairedTokenMint: Address<TAccountPairedTokenMint>;
  baseVault: Address<TAccountBaseVault>;
  pairedVault: Address<TAccountPairedVault>;
  platformTreasury?: Address<TAccountPlatformTreasury>;
  baseTokenAccount: Address<TAccountBaseTokenAccount>;
  pairTokenAccount: Address<TAccountPairTokenAccount>;
  user: TransactionSigner<TAccountUser>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  inputAmount: SwapInstructionDataArgs['inputAmount'];
  minOutputAmount: SwapInstructionDataArgs['minOutputAmount'];
};

export async function getSwapInstructionAsync<
  TAccountPlatformState extends string,
  TAccountPair extends string,
  TAccountBaseTokenMint extends string,
  TAccountPairedTokenMint extends string,
  TAccountBaseVault extends string,
  TAccountPairedVault extends string,
  TAccountPlatformTreasury extends string,
  TAccountBaseTokenAccount extends string,
  TAccountPairTokenAccount extends string,
  TAccountUser extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: SwapAsyncInput<
    TAccountPlatformState,
    TAccountPair,
    TAccountBaseTokenMint,
    TAccountPairedTokenMint,
    TAccountBaseVault,
    TAccountPairedVault,
    TAccountPlatformTreasury,
    TAccountBaseTokenAccount,
    TAccountPairTokenAccount,
    TAccountUser,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SwapInstruction<
    TProgramAddress,
    TAccountPlatformState,
    TAccountPair,
    TAccountBaseTokenMint,
    TAccountPairedTokenMint,
    TAccountBaseVault,
    TAccountPairedVault,
    TAccountPlatformTreasury,
    TAccountBaseTokenAccount,
    TAccountPairTokenAccount,
    TAccountUser,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformState: { value: input.platformState ?? null, isWritable: false },
    pair: { value: input.pair ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    pairedTokenMint: {
      value: input.pairedTokenMint ?? null,
      isWritable: false,
    },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    pairedVault: { value: input.pairedVault ?? null, isWritable: true },
    platformTreasury: {
      value: input.platformTreasury ?? null,
      isWritable: true,
    },
    baseTokenAccount: {
      value: input.baseTokenAccount ?? null,
      isWritable: true,
    },
    pairTokenAccount: {
      value: input.pairTokenAccount ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.pair.value) {
    accounts.pair.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([112, 97, 105, 114])),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
        getAddressEncoder().encode(
          expectAddress(accounts.pairedTokenMint.value)
        ),
      ],
    });
  }
  if (!accounts.platformTreasury.value) {
    accounts.platformTreasury.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.platformState.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.pair),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.pairedTokenMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.pairedVault),
      getAccountMeta(accounts.platformTreasury),
      getAccountMeta(accounts.baseTokenAccount),
      getAccountMeta(accounts.pairTokenAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPlatformState,
    TAccountPair,
    TAccountBaseTokenMint,
    TAccountPairedTokenMint,
    TAccountBaseVault,
    TAccountPairedVault,
    TAccountPlatformTreasury,
    TAccountBaseTokenAccount,
    TAccountPairTokenAccount,
    TAccountUser,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type SwapInput<
  TAccountPlatformState extends string = string,
  TAccountPair extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountPairedTokenMint extends string = string,
  TAccountBaseVault extends string = string,
  TAccountPairedVault extends string = string,
  TAccountPlatformTreasury extends string = string,
  TAccountBaseTokenAccount extends string = string,
  TAccountPairTokenAccount extends string = string,
  TAccountUser extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  platformState: Address<TAccountPlatformState>;
  pair: Address<TAccountPair>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  pairedTokenMint: Address<TAccountPairedTokenMint>;
  baseVault: Address<TAccountBaseVault>;
  pairedVault: Address<TAccountPairedVault>;
  platformTreasury: Address<TAccountPlatformTreasury>;
  baseTokenAccount: Address<TAccountBaseTokenAccount>;
  pairTokenAccount: Address<TAccountPairTokenAccount>;
  user: TransactionSigner<TAccountUser>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  inputAmount: SwapInstructionDataArgs['inputAmount'];
  minOutputAmount: SwapInstructionDataArgs['minOutputAmount'];
};

export function getSwapInstruction<
  TAccountPlatformState extends string,
  TAccountPair extends string,
  TAccountBaseTokenMint extends string,
  TAccountPairedTokenMint extends string,
  TAccountBaseVault extends string,
  TAccountPairedVault extends string,
  TAccountPlatformTreasury extends string,
  TAccountBaseTokenAccount extends string,
  TAccountPairTokenAccount extends string,
  TAccountUser extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: SwapInput<
    TAccountPlatformState,
    TAccountPair,
    TAccountBaseTokenMint,
    TAccountPairedTokenMint,
    TAccountBaseVault,
    TAccountPairedVault,
    TAccountPlatformTreasury,
    TAccountBaseTokenAccount,
    TAccountPairTokenAccount,
    TAccountUser,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SwapInstruction<
  TProgramAddress,
  TAccountPlatformState,
  TAccountPair,
  TAccountBaseTokenMint,
  TAccountPairedTokenMint,
  TAccountBaseVault,
  TAccountPairedVault,
  TAccountPlatformTreasury,
  TAccountBaseTokenAccount,
  TAccountPairTokenAccount,
  TAccountUser,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    platformState: { value: input.platformState ?? null, isWritable: false },
    pair: { value: input.pair ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    pairedTokenMint: {
      value: input.pairedTokenMint ?? null,
      isWritable: false,
    },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    pairedVault: { value: input.pairedVault ?? null, isWritable: true },
    platformTreasury: {
      value: input.platformTreasury ?? null,
      isWritable: true,
    },
    baseTokenAccount: {
      value: input.baseTokenAccount ?? null,
      isWritable: true,
    },
    pairTokenAccount: {
      value: input.pairTokenAccount ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.pair),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.pairedTokenMint),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.pairedVault),
      getAccountMeta(accounts.platformTreasury),
      getAccountMeta(accounts.baseTokenAccount),
      getAccountMeta(accounts.pairTokenAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getSwapInstructionDataEncoder().encode(
      args as SwapInstructionDataArgs
    ),
  } as SwapInstruction<
    TProgramAddress,
    TAccountPlatformState,
    TAccountPair,
    TAccountBaseTokenMint,
    TAccountPairedTokenMint,
    TAccountBaseVault,
    TAccountPairedVault,
    TAccountPlatformTreasury,
    TAccountBaseTokenAccount,
    TAccountPairTokenAccount,
    TAccountUser,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedSwapInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    platformState: TAccountMetas[0];
    pair: TAccountMetas[1];
    baseTokenMint: TAccountMetas[2];
    pairedTokenMint: TAccountMetas[3];
    baseVault: TAccountMetas[4];
    pairedVault: TAccountMetas[5];
    platformTreasury: TAccountMetas[6];
    baseTokenAccount: TAccountMetas[7];
    pairTokenAccount: TAccountMetas[8];
    user: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
    associatedTokenProgram: TAccountMetas[12];
  };
  data: SwapInstructionData;
};

export function parseSwapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSwapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      platformState: getNextAccount(),
      pair: getNextAccount(),
      baseTokenMint: getNextAccount(),
      pairedTokenMint: getNextAccount(),
      baseVault: getNextAccount(),
      pairedVault: getNextAccount(),
      platformTreasury: getNextAccount(),
      baseTokenAccount: getNextAccount(),
      pairTokenAccount: getNextAccount(),
      user: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getSwapInstructionDataDecoder().decode(instruction.data),
  };
}
