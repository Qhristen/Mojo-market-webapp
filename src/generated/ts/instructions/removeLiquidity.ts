/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  80, 85, 209, 72, 24, 206, 177, 108,
]);

export function getRemoveLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_LIQUIDITY_DISCRIMINATOR
  );
}

export type RemoveLiquidityInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountPair extends string | IAccountMeta<string> = string,
  TAccountBaseVault extends string | IAccountMeta<string> = string,
  TAccountUserBaseAta extends string | IAccountMeta<string> = string,
  TAccountPairedVault extends string | IAccountMeta<string> = string,
  TAccountUserPairedAta extends string | IAccountMeta<string> = string,
  TAccountLpMint extends string | IAccountMeta<string> = string,
  TAccountUserLpAta extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountPair extends string
        ? WritableAccount<TAccountPair>
        : TAccountPair,
      TAccountBaseVault extends string
        ? WritableAccount<TAccountBaseVault>
        : TAccountBaseVault,
      TAccountUserBaseAta extends string
        ? WritableAccount<TAccountUserBaseAta>
        : TAccountUserBaseAta,
      TAccountPairedVault extends string
        ? WritableAccount<TAccountPairedVault>
        : TAccountPairedVault,
      TAccountUserPairedAta extends string
        ? WritableAccount<TAccountUserPairedAta>
        : TAccountUserPairedAta,
      TAccountLpMint extends string
        ? WritableAccount<TAccountLpMint>
        : TAccountLpMint,
      TAccountUserLpAta extends string
        ? WritableAccount<TAccountUserLpAta>
        : TAccountUserLpAta,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  lpAmount: bigint;
  minBase: bigint;
  minPaired: bigint;
};

export type RemoveLiquidityInstructionDataArgs = {
  lpAmount: number | bigint;
  minBase: number | bigint;
  minPaired: number | bigint;
};

export function getRemoveLiquidityInstructionDataEncoder(): Encoder<RemoveLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['lpAmount', getU64Encoder()],
      ['minBase', getU64Encoder()],
      ['minPaired', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REMOVE_LIQUIDITY_DISCRIMINATOR })
  );
}

export function getRemoveLiquidityInstructionDataDecoder(): Decoder<RemoveLiquidityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['lpAmount', getU64Decoder()],
    ['minBase', getU64Decoder()],
    ['minPaired', getU64Decoder()],
  ]);
}

export function getRemoveLiquidityInstructionDataCodec(): Codec<
  RemoveLiquidityInstructionDataArgs,
  RemoveLiquidityInstructionData
> {
  return combineCodec(
    getRemoveLiquidityInstructionDataEncoder(),
    getRemoveLiquidityInstructionDataDecoder()
  );
}

export type RemoveLiquidityInput<
  TAccountUser extends string = string,
  TAccountPair extends string = string,
  TAccountBaseVault extends string = string,
  TAccountUserBaseAta extends string = string,
  TAccountPairedVault extends string = string,
  TAccountUserPairedAta extends string = string,
  TAccountLpMint extends string = string,
  TAccountUserLpAta extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** The user removing liquidity */
  user: TransactionSigner<TAccountUser>;
  /** The Pair state for the MOJO/paired token pool */
  pair: Address<TAccountPair>;
  /** Vault holding base token (MOJO) */
  baseVault: Address<TAccountBaseVault>;
  /** User's base token ATA */
  userBaseAta: Address<TAccountUserBaseAta>;
  /** Vault holding paired token */
  pairedVault: Address<TAccountPairedVault>;
  /** User's paired token ATA */
  userPairedAta: Address<TAccountUserPairedAta>;
  /** LP token mint for this pool */
  lpMint: Address<TAccountLpMint>;
  /** User's LP token ATA */
  userLpAta: Address<TAccountUserLpAta>;
  /** Token program */
  tokenProgram?: Address<TAccountTokenProgram>;
  lpAmount: RemoveLiquidityInstructionDataArgs['lpAmount'];
  minBase: RemoveLiquidityInstructionDataArgs['minBase'];
  minPaired: RemoveLiquidityInstructionDataArgs['minPaired'];
};

export function getRemoveLiquidityInstruction<
  TAccountUser extends string,
  TAccountPair extends string,
  TAccountBaseVault extends string,
  TAccountUserBaseAta extends string,
  TAccountPairedVault extends string,
  TAccountUserPairedAta extends string,
  TAccountLpMint extends string,
  TAccountUserLpAta extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: RemoveLiquidityInput<
    TAccountUser,
    TAccountPair,
    TAccountBaseVault,
    TAccountUserBaseAta,
    TAccountPairedVault,
    TAccountUserPairedAta,
    TAccountLpMint,
    TAccountUserLpAta,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveLiquidityInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountPair,
  TAccountBaseVault,
  TAccountUserBaseAta,
  TAccountPairedVault,
  TAccountUserPairedAta,
  TAccountLpMint,
  TAccountUserLpAta,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    pair: { value: input.pair ?? null, isWritable: true },
    baseVault: { value: input.baseVault ?? null, isWritable: true },
    userBaseAta: { value: input.userBaseAta ?? null, isWritable: true },
    pairedVault: { value: input.pairedVault ?? null, isWritable: true },
    userPairedAta: { value: input.userPairedAta ?? null, isWritable: true },
    lpMint: { value: input.lpMint ?? null, isWritable: true },
    userLpAta: { value: input.userLpAta ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.pair),
      getAccountMeta(accounts.baseVault),
      getAccountMeta(accounts.userBaseAta),
      getAccountMeta(accounts.pairedVault),
      getAccountMeta(accounts.userPairedAta),
      getAccountMeta(accounts.lpMint),
      getAccountMeta(accounts.userLpAta),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getRemoveLiquidityInstructionDataEncoder().encode(
      args as RemoveLiquidityInstructionDataArgs
    ),
  } as RemoveLiquidityInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountPair,
    TAccountBaseVault,
    TAccountUserBaseAta,
    TAccountPairedVault,
    TAccountUserPairedAta,
    TAccountLpMint,
    TAccountUserLpAta,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedRemoveLiquidityInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The user removing liquidity */
    user: TAccountMetas[0];
    /** The Pair state for the MOJO/paired token pool */
    pair: TAccountMetas[1];
    /** Vault holding base token (MOJO) */
    baseVault: TAccountMetas[2];
    /** User's base token ATA */
    userBaseAta: TAccountMetas[3];
    /** Vault holding paired token */
    pairedVault: TAccountMetas[4];
    /** User's paired token ATA */
    userPairedAta: TAccountMetas[5];
    /** LP token mint for this pool */
    lpMint: TAccountMetas[6];
    /** User's LP token ATA */
    userLpAta: TAccountMetas[7];
    /** Token program */
    tokenProgram: TAccountMetas[8];
  };
  data: RemoveLiquidityInstructionData;
};

export function parseRemoveLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRemoveLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      pair: getNextAccount(),
      baseVault: getNextAccount(),
      userBaseAta: getNextAccount(),
      pairedVault: getNextAccount(),
      userPairedAta: getNextAccount(),
      lpMint: getNextAccount(),
      userLpAta: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getRemoveLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
