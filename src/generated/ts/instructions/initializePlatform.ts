/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { MOJO_CONTRACT_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_PLATFORM_DISCRIMINATOR = new Uint8Array([
  119, 201, 101, 45, 75, 122, 89, 3,
]);

export function getInitializePlatformDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_PLATFORM_DISCRIMINATOR
  );
}

export type InitializePlatformInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountAdmin extends string | IAccountMeta<string> = string,
  TAccountBaseTokenMint extends string | IAccountMeta<string> = string,
  TAccountPlatformState extends string | IAccountMeta<string> = string,
  TAccountPlatformTreasury extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountAssociatedTokenProgram extends
    | string
    | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAdmin extends string
        ? WritableSignerAccount<TAccountAdmin> &
            IAccountSignerMeta<TAccountAdmin>
        : TAccountAdmin,
      TAccountBaseTokenMint extends string
        ? ReadonlyAccount<TAccountBaseTokenMint>
        : TAccountBaseTokenMint,
      TAccountPlatformState extends string
        ? WritableAccount<TAccountPlatformState>
        : TAccountPlatformState,
      TAccountPlatformTreasury extends string
        ? WritableAccount<TAccountPlatformTreasury>
        : TAccountPlatformTreasury,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePlatformInstructionData = {
  discriminator: ReadonlyUint8Array;
  protocolFeeRate: number;
};

export type InitializePlatformInstructionDataArgs = { protocolFeeRate: number };

export function getInitializePlatformInstructionDataEncoder(): Encoder<InitializePlatformInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['protocolFeeRate', getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_PLATFORM_DISCRIMINATOR })
  );
}

export function getInitializePlatformInstructionDataDecoder(): Decoder<InitializePlatformInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['protocolFeeRate', getU16Decoder()],
  ]);
}

export function getInitializePlatformInstructionDataCodec(): Codec<
  InitializePlatformInstructionDataArgs,
  InitializePlatformInstructionData
> {
  return combineCodec(
    getInitializePlatformInstructionDataEncoder(),
    getInitializePlatformInstructionDataDecoder()
  );
}

export type InitializePlatformAsyncInput<
  TAccountAdmin extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountPlatformState extends string = string,
  TAccountPlatformTreasury extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  platformState?: Address<TAccountPlatformState>;
  platformTreasury?: Address<TAccountPlatformTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  protocolFeeRate: InitializePlatformInstructionDataArgs['protocolFeeRate'];
};

export async function getInitializePlatformInstructionAsync<
  TAccountAdmin extends string,
  TAccountBaseTokenMint extends string,
  TAccountPlatformState extends string,
  TAccountPlatformTreasury extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: InitializePlatformAsyncInput<
    TAccountAdmin,
    TAccountBaseTokenMint,
    TAccountPlatformState,
    TAccountPlatformTreasury,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializePlatformInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountBaseTokenMint,
    TAccountPlatformState,
    TAccountPlatformTreasury,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    platformState: { value: input.platformState ?? null, isWritable: true },
    platformTreasury: {
      value: input.platformTreasury ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.platformState.value) {
    accounts.platformState.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            112, 108, 97, 116, 102, 111, 114, 109, 45, 115, 116, 97, 116, 101,
          ])
        ),
      ],
    });
  }
  if (!accounts.platformTreasury.value) {
    accounts.platformTreasury.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.platformState.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.baseTokenMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.platformTreasury),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializePlatformInstructionDataEncoder().encode(
      args as InitializePlatformInstructionDataArgs
    ),
  } as InitializePlatformInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountBaseTokenMint,
    TAccountPlatformState,
    TAccountPlatformTreasury,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type InitializePlatformInput<
  TAccountAdmin extends string = string,
  TAccountBaseTokenMint extends string = string,
  TAccountPlatformState extends string = string,
  TAccountPlatformTreasury extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  admin: TransactionSigner<TAccountAdmin>;
  baseTokenMint: Address<TAccountBaseTokenMint>;
  platformState: Address<TAccountPlatformState>;
  platformTreasury: Address<TAccountPlatformTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  protocolFeeRate: InitializePlatformInstructionDataArgs['protocolFeeRate'];
};

export function getInitializePlatformInstruction<
  TAccountAdmin extends string,
  TAccountBaseTokenMint extends string,
  TAccountPlatformState extends string,
  TAccountPlatformTreasury extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
>(
  input: InitializePlatformInput<
    TAccountAdmin,
    TAccountBaseTokenMint,
    TAccountPlatformState,
    TAccountPlatformTreasury,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePlatformInstruction<
  TProgramAddress,
  TAccountAdmin,
  TAccountBaseTokenMint,
  TAccountPlatformState,
  TAccountPlatformTreasury,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? MOJO_CONTRACT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    admin: { value: input.admin ?? null, isWritable: true },
    baseTokenMint: { value: input.baseTokenMint ?? null, isWritable: false },
    platformState: { value: input.platformState ?? null, isWritable: true },
    platformTreasury: {
      value: input.platformTreasury ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.admin),
      getAccountMeta(accounts.baseTokenMint),
      getAccountMeta(accounts.platformState),
      getAccountMeta(accounts.platformTreasury),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getInitializePlatformInstructionDataEncoder().encode(
      args as InitializePlatformInstructionDataArgs
    ),
  } as InitializePlatformInstruction<
    TProgramAddress,
    TAccountAdmin,
    TAccountBaseTokenMint,
    TAccountPlatformState,
    TAccountPlatformTreasury,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedInitializePlatformInstruction<
  TProgram extends string = typeof MOJO_CONTRACT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    admin: TAccountMetas[0];
    baseTokenMint: TAccountMetas[1];
    platformState: TAccountMetas[2];
    platformTreasury: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    associatedTokenProgram: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: InitializePlatformInstructionData;
};

export function parseInitializePlatformInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializePlatformInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      admin: getNextAccount(),
      baseTokenMint: getNextAccount(),
      platformState: getNextAccount(),
      platformTreasury: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getInitializePlatformInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
